Task no 1
Insertion at start, end, or at the specific position of the circular doubly linked list.

#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node* prev;

    Node(int value) {
        data = value;
        next = prev = nullptr;
    }
};

class CDLL {
private:
    Node* head;

    Node* createNode(int value) {
        return new Node(value);
    }

public:
    CDLL() {
        head = nullptr;
    }
    void insertAtStart(int value) {
        Node* newNode = createNode(value);

        if (head == nullptr) {
            newNode->next = newNode->prev = newNode;
            head = newNode;
        } else {
            Node* tail = head->prev;

            newNode->next = head;
            newNode->prev = tail;

            tail->next = newNode;
            head->prev = newNode;

            head = newNode;
        }
    }
    void insertAtEnd(int value) {
        if (head == nullptr) {
            insertAtStart(value);
            return;
        }

        Node* newNode = createNode(value);
        Node* tail = head->prev;

        newNode->next = head;
        newNode->prev = tail;

        tail->next = newNode;
        head->prev = newNode;
    }
    void insertAtPosition(int value, int position) {
        if (position == 1) {
            insertAtStart(value);
            return;
        }

        Node* temp = head;
        int count = 1;

        while (count < position - 1 && temp->next != head) {
            temp = temp->next;
            count++;
        }

        Node* newNode = createNode(value);
        newNode->next = temp->next;
        newNode->prev = temp;

        temp->next->prev = newNode;
        temp->next = newNode;
    }
    void display() {
        if (head == nullptr) {
            cout << "List is empty." << endl;
            return;
        }

        Node* temp = head;
        do {
            cout << temp->data << " ";
            temp = temp->next;
        } while (temp != head);
        cout << endl;
    }
};

int main() {
    CDLL list;
    int val, pos;
    cout << "Insert at start: ";
    cin >> val;
    list.insertAtStart(val);
    cout << "Insert at end: ";
    cin >> val;
    list.insertAtEnd(val);
    cout << "Insert value and position: ";
    cin >> val >> pos;
    list.insertAtPosition(val, pos);
    cout << "Current List: ";
    list.display();

    return 0;
}

